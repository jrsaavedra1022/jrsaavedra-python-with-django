Configurar el servidor

-------------------------------

Es una buena práctica al conectarnos por primera vez a nuestro servidor actualizar los paquetes del Sistema Operativo con los siguientes comandos:

sudo apt-get update && sudo apt-get upgrade

Configuración inicial del servidor
Creamos un nuevo usuario sin directorio home que tenga la capacidad de correr algunos comandos de súper usuario:
sudo useradd -g sudo -M <username>

Le asignamos una contraseña segura al nuevo usuario:
sudo passwd <username>

Iniciamos sesión con el nuevo usuario:
su <username>

Por último vamos a instalar las dependencias de python, postgress, git y nginix con el siguiente comando:
sudo apt-get install python3-pip python3-dev postgresql postgresql-contrib libpq-dev git nginx

Configurar PostgreSQL
Primero iniciamos sesión con el usuario postgres usando el comando sudo su postgres y después escribimos psql para entrar al shell interactivo de PostgreSQL donde configuramos lo siguiente:

Creamos una base de datos: CREATE DATABASE platzi;

Creamos un usuario para la base de datos: CREATE USER freddier WITH PASSWORD ‘cvander<3’;

Le damos permisos al usuario sobre la base de datos: GRANT ALL PRIVILEGES ON DATABASE platzi TO freddier;

Hecho esto, salimos del shell escribiendo \q seguido de exit para salir de la sesión de postgres.

Configurar el proyecto
Clonar el proyecto de Github:
git clone [https://github.com/pablotrinidad/platzigram.git](https://github.com/pablotrinidad/platzigram.git) platzi

Instalar virtualenv:
sudo pip3 install virtualenv

Crear entorno virtual:
virtualenv -p $(which python3) .venv

Activar entorno virtual:
source .venv/bin/activate

Instalar dependencias para Pillow:
sudo apt-get install libjpeg-dev

Ir al folder del proyecto:
cd platzi

Instalar dependencias de python del proyecto:
pip install -r requirements/prod.txt

Agregar algunas variables de entorno al archivo ~/.bashrc para probar localmente que todo esté funcionando:
vim ~/.bashrc

Las variables deben lucir algo similar a lo siguiente:

-----------------------------------------------
*************************************************
export PLATZI_SECRET_KEY="random_key:aasdafasf"
export PLATZI_DB_NAME="platzi"
export PLATZI_DB_USER="freddier"
export PLATZI_DB_PASSWORD="cvander<3"
export PLATZI_DB_PORT="5432"
export PLATZI_DB_HOST="localhost"
export DJANGO_SETTINGS_MODULE="platzi.settings.prod"
*******************************************************
-------------------------------------------------------


Leemos las variables:
source ~/.bashrc

Editamos la variable **ALLOWED_HOSTS **del archivo de settings de producción:
vim platzi/settings/prod.py

La variable tendrá algo como lo siguiente, donde gatos.io será tu dominio o IP:

----------------------------------------------------
************************************************
ALLOWED_HOSTS = [’gatos.io’]
**************************************************
-------------------------------------------------

Hacer un Sanity Check
Hasta este punto el proyecto debe ser capaz de escribir a la base de datos además de servirse usando el servidor de desarrollo y gunicorn. Probémoslo:

Reflejar el modelo de Django en PostgreSQL: ./manage.py migrate
Crear un súper usuario: ./manage.py createsuperuser
Correr servidor de desarrollo: ./manage.py runserver 0.0.0.0:8000
Correr gunicorn: gunicorn platzi.wsgi -b 0.0.0.0:8000
Si todo funcionó correctamente, los pasos 3 y 4 debieron mostrar tu sitio en la URL o IP en el puerto 8000.

Configurar Nginx
Iniciar sesión como súper usuario: sudo su -
Ir al directorio de Nginx: cd /etc/nginx/
Borrar los antiguos archivos de configuración: rm sites-*/default
Crear un nuevo archivo vim sites-available/app con el siguiente contenido:

-------------------------------------------------------
*******************************************************
upstream django_app {
    server 127.0.0.1:8000;
}

server {

    listen 80;
    server_name demo.gatos.io;

    access_log /var/log/nginx/app.log;
    error_log /var/log/nginx/app.error.log;

    location /static {
        autoindex on;
        alias /home/platzi/platzi/staticfiles/;
    }

    location /media {
        autoindex on;
        alias /home/platzi/platzi/media/;
    }

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        proxy_pass http://django_app;
    }

}

********************************************************
--------------------------------------------------------
Enlazar los archivos: ln -s /etc/nginx/sites-available/app /etc/nginx/sites-enabled/
Reiniciar Nginx: service nginx restart
Configurar Gunicorn
Regresamos a la sesión de Platzi: exit
Creamos directorios para los scripts y los logs: mkdir deploy logs
Creamos un script dentro de deploy vim deploy/gunicorn_start con un contenido similar al siguiente:

---------------------------------------------------------------
***********************************************************
#!/bin/bash

NAME="platzi"
VIRTUALENV="/home/platzi/venv/"
DJANGODIR="/home/platzi/platzi/"
USER=platzi
GROUP=sudo
NUM_WORKERS=3
DJANGO_WSGI_MODULE=platzi.wsgi

echo "Starting $NAME as `whoami`"

cd $VIRTUALENV
source bin/activate
cd $DJANGODIR

export PLATZI_SECRET_KEY="&wrw__y!3_hlh@&1v)a!%=ext=-7zuqewv+#^qu^63g)a(3f3@"

export PLATZI_DB_NAME="platzi"
export PLATZI_DB_USER="cvander"
export PLATZI_DB_PASSWORD="adminadmin123"
export PLATZI_DB_PORT="5432"
export PLATZI_DB_HOST="localhost"

export DJANGO_SETTINGS_MODULE="platzi.settings.prod"

export PYTHONPATH=$DJANGODIR:$PYTHONPATH

exec gunicorn ${DJANGO_WSGI_MODULE} \
        --workers $NUM_WORKERS \
        --user=$USER --group=$GROUP \
        --log-level=debug \
        --bind=127.0.0.1:8000

*******************************************************************
----------------------------------------------------------

Hacer el script ejecutable: chmod +x deploy/gunicorn_start
Probar el script: deploy/gunicorn_start
Mientras el script esté corriendo, el proyecto estará viviendo en la IP en el puerto 80.

Crear un servicio
Iniciar sesión como súper usuario: sudo su -
Ir al directorio de los servicios: cd /etc/init
Crear el servicio vim platzi.conf con el siguiente contenido:

--------------------------------------------------------
********************************************************
# platzi

# description "Platzi Linux Service"
# authon "Pablo Trinidad"

start on startup

script
    exec /home/platzi/deploy/gunicorn_start
end script

**********************************************************
--------------------------------------------------------

Iniciar servicio: service platzi start
Por último regresamos al directorio que contiene el proyecto y ejecutamos: ./manage.py collectstatic
